Cours : Comprendre le Drag and Drop avec un exemple de boîtes à déplacer
1. Qu’est-ce que le Drag and Drop ?
Le drag and drop (glisser-déposer) est une fonctionnalité qui permet à un utilisateur de cliquer sur un élément, de le faire glisser avec la souris, puis de le déposer dans une autre zone.
Cela rend les interfaces web interactives et dynamiques : déplacer des fichiers, organiser des éléments, etc.

2. Les bases du Drag and Drop en HTML5
Attribut HTML important :
draggable="true"
Cet attribut permet de rendre un élément déplaçable.

Événements JavaScript principaux à connaître :
Événement	Quand il est déclenché	Rôle principal
dragstart	Quand on commence à glisser un élément	Stocker les données du drag (ex : l’id de l’élément)
dragover	Quand un élément est survolé par un drag	Permet d’autoriser le drop en appelant e.preventDefault()
drop	Quand l’élément est lâché sur la zone cible	Récupérer les données et déplacer l’élément

3. Exemple : déplacer des boîtes entre deux zones
On crée deux zones de dépôt, et trois boîtes bleues déplaçables. On peut glisser les boîtes d’une zone à l’autre.

Le code complet
(avec commentaires dans le HTML et JS pour bien comprendre chaque étape)

index.html
html
Copier
Modifier
<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8" />
  <title>Drag and Drop : Déplacer des boîtes</title>
  <link rel="stylesheet" href="styles.css" />
</head>
<body>

  <!-- Titre de la page -->
  <h1>Drag and Drop - Déplacer des boîtes</h1>

  <!-- Conteneur principal contenant deux zones -->
  <div class="container">

    <!-- Zone 1 : contient les boîtes initiales -->
    <div id="zone1" class="dropzone">
      <h2>Zone 1</h2>
      <!-- Les boîtes déplaçables, chacune avec un id unique et draggable -->
      <div id="box1" class="box" draggable="true">Boîte 1</div>
      <div id="box2" class="box" draggable="true">Boîte 2</div>
      <div id="box3" class="box" draggable="true">Boîte 3</div>
    </div>

    <!-- Zone 2 : zone vide où on peut déposer les boîtes -->
    <div id="zone2" class="dropzone">
      <h2>Zone 2</h2>
      <!-- Les boîtes peuvent être déposées ici -->
    </div>
    
  </div>

  <!-- Inclusion du script JavaScript -->
  <script src="script.js"></script>
</body>
</html>





styles.css

Copier
Modifier
body {
  font-family: Arial, sans-serif;
  padding: 20px;
}

.container {
  display: flex;
  gap: 40px;
}

.dropzone {
  width: 250px;
  min-height: 300px;
  border: 3px dashed #888;
  padding: 10px;
  border-radius: 8px;
  background-color: #f0f0f0;
}

.dropzone h2 {
  text-align: center;
  margin-bottom: 15px;
}

.box {
  background-color: #3498db;
  color: white;
  margin: 10px auto;
  padding: 20px;
  width: 80%;
  text-align: center;
  cursor: grab;
  border-radius: 5px;
  user-select: none;
  transition: background-color 0.3s;
}

.box:active {
  cursor: grabbing;
  background-color: #2980b9;
}

.dropzone.dragover {
  background-color: #d1ffd6;
  border-color: #27ae60;
}




script.js

// Sélection de toutes les boîtes déplaçables
const boxes = document.querySelectorAll('.box');

// Sélection de toutes les zones de dépôt
const dropzones = document.querySelectorAll('.dropzone');

// Pour chaque boîte, on ajoute les événements liés au drag and drop
boxes.forEach(box => {

  // Début du drag : stocker l'id et cacher la boîte temporairement
  box.addEventListener('dragstart', (e) => {
    e.dataTransfer.setData('text/plain', e.target.id); // On stocke l'id
    setTimeout(() => {
      e.target.style.display = 'none'; // On cache l'élément pendant le drag
    }, 0);
  });

  // Fin du drag : rendre la boîte visible à nouveau
  box.addEventListener('dragend', (e) => {
    e.target.style.display = 'block';
  });

});

// Pour chaque zone de dépôt, gérer l'autorisation du drop et le dépôt
dropzones.forEach(zone => {

  // Quand un élément est au-dessus de la zone : autoriser le drop et changer le style
  zone.addEventListener('dragover', (e) => {
    e.preventDefault(); // Sans ça, le drop n'est pas autorisé
    zone.classList.add('dragover'); // Ajoute un style visuel
  });

  // Quand on sort de la zone sans déposer : enlever le style
  zone.addEventListener('dragleave', () => {
    zone.classList.remove('dragover');
  });

  // Quand on lâche la boîte sur la zone : récupérer l'élément et l'ajouter à la zone
  zone.addEventListener('drop', (e) => {
    e.preventDefault(); // Empêche le comportement par défaut

    zone.classList.remove('dragover'); // Enlève le style

    const id = e.dataTransfer.getData('text/plain'); // Récupère l'id de la boîte
    const draggable = document.getElementById(id); // Sélectionne la boîte

    if (draggable) {
      zone.appendChild(draggable); // Ajoute la boîte dans la zone de dépôt
    }
  });

});
4. Résumé
On définit des éléments HTML draggable="true" pour les rendre déplaçables.

L’événement dragstart permet de mémoriser ce qu’on déplace.

Dans la zone cible, dragover doit être annulé (avec e.preventDefault()) pour autoriser le dépôt.

L’événement drop récupère les données mémorisées et déplace l’élément dans la zone cible.

Le CSS aide à rendre l’interface claire (bords, couleurs, changement visuel lors du drag).

5. Exercice pour toi
Crée une troisième zone de dépôt "Zone 3" avec la même taille et style.

Essaie d’ajouter la possibilité de déplacer les boîtes aussi vers cette nouvelle zone.

Bonus : ajoute un message dans chaque zone quand elle est vide, et fais-le disparaître quand une boîte y est déposée.